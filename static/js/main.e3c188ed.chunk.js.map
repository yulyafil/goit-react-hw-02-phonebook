{"version":3,"sources":["Components/Form/Form.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["INIITAL_STATE","name","number","ContactForm","state","nameInputId","uuidv4","handleChange","target","value","setState","handleSubmit","e","preventDefault","onAdd","props","validateForm","id","reset","onCheckUnique","alert","contacts","className","onSubmit","this","htmlFor","type","onChange","Component","ContactListItem","onRemove","onClick","ContactList","length","map","contact","Filter","filter","App","handleAddContact","newContact","handleCheckUnique","isExistContact","find","handleRemoveContact","handleFilterChange","getVisibleContacts","toLowerCase","includes","visibleContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAIMA,EAAgB,CAClBC,KAAM,GACNC,OAAQ,IAqFGC,E,4MAjFXC,MAAQJ,E,EAERK,YAAcC,c,EAEdC,aAAe,YAAe,IAAbC,EAAY,EAAZA,OACLP,EAAgBO,EAAhBP,KAAMQ,EAAUD,EAAVC,MACd,EAAKC,SAAL,eAAiBT,EAAOQ,K,EAE5BE,aAAe,SAAAC,GACXA,EAAEC,iBADc,MAES,EAAKT,MAAtBH,EAFQ,EAERA,KAAMC,EAFE,EAEFA,OACNY,EAAU,EAAKC,MAAfD,MAEgB,EAAKE,iBAK7BF,EAAM,CAACG,GAAI,EAAKZ,YAAaJ,OAAMC,WAEnC,EAAKgB,U,EAETF,aAAe,WAAO,IAAD,EACO,EAAKZ,MAAtBH,EADU,EACVA,KAAMC,EADI,EACJA,OACLiB,EAAkB,EAAKJ,MAAvBI,cACR,OAAKlB,GAASC,EAIPiB,EAAclB,IAHjBmB,MAAM,wBACC,I,EAIfF,MAAQ,WACJ,EAAKR,SAAS,CACVW,SAAU,GACVpB,KAAM,GACNC,OAAQ,M,uDAOZ,OACJ,uBAAMoB,UAAU,cAAcC,SAAUC,KAAKb,aAA7C,UACM,wBAAOc,QAASD,KAAKnB,YAArB,iBAEE,uBACA,uBACIqB,KAAK,OACLzB,KAAK,OACLQ,MAAOe,KAAKpB,MAAMH,KAClB0B,SAAUH,KAAKjB,aACfU,GAAIO,KAAKnB,iBAKb,wBAAOoB,QAASD,KAAKnB,YAArB,UACQ,uBADR,SAGQ,uBACR,uBACIqB,KAAK,MACLzB,KAAK,SACLQ,MAAOe,KAAKpB,MAAMF,OAClByB,SAAUH,KAAKjB,aACfU,GAAIO,KAAKnB,iBAKd,uBACF,uBACD,wBAAQqB,KAAK,SAAb,iC,GA1EkBE,a,OCTpBC,EAAkB,SAAC,GAAoC,IAAlCZ,EAAiC,EAAjCA,GAAIhB,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,OAAQ4B,EAAe,EAAfA,SAEzC,OACI,+BACC7B,EADD,MACUC,EACV,wBAAQ6B,QAAS,kBAAMD,EAASb,IAAhC,sBAFSA,IAqBFe,EAXK,SAAC,GAA4B,IAA1BX,EAAyB,EAAzBA,SAAUS,EAAe,EAAfA,SAC7B,OAAwB,IAApBT,EAASY,OACF,KAGP,6BACKZ,EAASa,KAAI,SAAAC,GAAO,OAAK,cAAC,EAAD,2BAAqBA,GAArB,IAA8BL,SAAUA,WCA/DM,EAnBA,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,OAAQV,EAAc,EAAdA,SACrB,OACI,0DAEK,uBACD,uBACAD,KAAK,OACLzB,KAAK,SACLQ,MAAO4B,EACPV,SAAU,gBAAGnB,EAAH,EAAGA,OAAH,OAAgBmB,EAASnB,EAAOC,cCuDvC6B,E,4MAvDblC,MAAQ,CACNiB,SAAU,CACV,CAACJ,GAAI,OAAQhB,KAAM,gBAAiBC,OAAQ,aAC5C,CAACe,GAAI,OAAQhB,KAAM,iBAAkBC,OAAQ,aAC7C,CAACe,GAAI,OAAQhB,KAAM,gBAAiBC,OAAQ,aAC5C,CAACe,GAAI,OAAQhB,KAAM,iBAAkBC,OAAQ,cAE7CmC,OAAQ,I,EAGVE,iBAAmB,SAAAC,GACjB,EAAK9B,UAAS,gBAAGW,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,GAAD,mBAAMA,GAAN,CAAgBmB,S,EAG5BC,kBAAoB,SAAAxC,GAAS,IAErByC,IADe,EAAKtC,MAAlBiB,SAC0BsB,MAAK,SAACR,GAAD,OAAaA,EAAQlC,OAASA,KAGrE,OAFAyC,GAAkBtB,MAAM,6BAEhBsB,G,EAEVE,oBAAsB,SAAC3B,GAAD,OAAQ,EAAKP,UAAS,kBAAmB,CAAEW,SAArB,EAAGA,SAAqCgB,QAAO,SAACF,GAAD,OAAaA,EAAQlB,KAAOA,U,EAEvH4B,mBAAqB,SAACR,GAAD,OAAY,EAAK3B,SAAS,CAAE2B,Y,EAEjDS,mBAAqB,WAAO,IAAD,EACI,EAAK1C,MAA1BiB,EADiB,EACjBA,SAAUgB,EADO,EACPA,OAClB,OAAOhB,EAASgB,QAAO,SAAAF,GAAO,OAAIA,EAAQlC,KAAK8C,cAAcC,SAASX,EAAOU,mB,uDAGrE,IACAV,EAAWb,KAAKpB,MAAhBiC,OACFY,EAAkBzB,KAAKsB,qBAC7B,OACA,gCACE,2CACE,cAAC,EAAD,CAAahC,MAAOU,KAAKe,iBAAkBpB,cAAgBK,KAAKiB,oBAEhE,0CAEA,cAAC,EAAD,CAAQJ,OAAQA,EAAQV,SAAUH,KAAKqB,qBAEvC,cAAC,EAAD,CAAaxB,SAAU4B,EAAiBnB,SAAWN,KAAKoB,6B,GA5C9ChB,aCIHsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e3c188ed.chunk.js","sourcesContent":["import  { Component } from 'react';\nimport './Form.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst INIITAL_STATE = {\n    name: '',\n    number: ''\n}\n\nclass ContactForm extends Component {\n    state = INIITAL_STATE;\n\n    nameInputId = uuidv4();\n\n    handleChange = ({target}) => {\n        const { name, value } = target;\n        this.setState({ [name]: value})\n    };\n    handleSubmit = e => {\n        e.preventDefault();\n        const { name, number } = this.state;\n        const { onAdd } = this.props;\n\n        const isValidatedForm = this.validateForm();\n\n        if (!isValidatedForm)\n            return\n        \n        onAdd({id: this.nameInputId, name, number})\n        \n        this.reset();\n    };\n    validateForm = () => {\n       const { name, number } = this.state;\n        const { onCheckUnique } = this.props; \n        if (!name || !number) {\n            alert('Some filed is empty');\n            return false\n        }\n        return onCheckUnique(name);\n    }\n    reset = () => {\n        this.setState({\n            contacts: [],\n            name: '', \n            number: ''\n        });\n    };\n\n\n    render() {\n\n        return (\n    <form className=\"FormContact\" onSubmit={this.handleSubmit}>\n          <label htmlFor={this.nameInputId}>\n                    Name\n            <br/>\n            <input\n                type=\"text\"\n                name=\"name\"\n                value={this.state.name}\n                onChange={this.handleChange}\n                id={this.nameInputId}\n            />\n            </label>\n                     \n                    \n            <label htmlFor={this.nameInputId}> \n                    <br/>\n                    Number\n                    <br/>\n            <input\n                type=\"tel\"\n                name=\"number\"\n                value={this.state.number}\n                onChange={this.handleChange}\n                id={this.nameInputId}            \n                \n            />\n        </label>\n        \n           <br/>         \n         <br/>\n        <button type=\"submit\" >Add contact </button>\n    </form>\n    \n        )\n    }\n\n}\n\nexport default ContactForm;","const ContactListItem = ({ id, name, number, onRemove }) => {\n    \n    return (\n        <li key={id}>\n        {name}:  {number}\n        <button onClick={() => onRemove(id)} >Delete</button>\n        </li>\n       \n    )\n    \n}\n\n\nconst ContactList = ({ contacts, onRemove }) => {\n    if (contacts.length === 0) {\n        return null\n    }\n    return (\n        <ul>\n            {contacts.map(contact => (<ContactListItem {...contact} onRemove={onRemove} />))}\n     </ul>\n    )\n}\n\nexport default ContactList;","const Filter = ({filter, onChange}) => {\n    return (\n        <label>\n            Find contacts by name\n             <br/>\n            <input\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={({ target }) => onChange(target.value)}\n        />\n        </label>\n        \n    \n    )  \n}\n\n\n\nexport default Filter;","\nimport React, { Component } from 'react'\n\nimport ContactForm from './Components/Form'\nimport ContactList from './Components/ContactList'\nimport Filter from './Components/Filter'\n// import Lesson from './Components/Lesson';\n\nclass App extends Component {\n  state = {\n    contacts: [\n    {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n    {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n    {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n    {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n  ], \n    filter: '',\n  };\n\n  handleAddContact = newContact => {\n    this.setState(({ contacts }) => ({\n      contacts: [...contacts, newContact],\n    }));\n  };\n  handleCheckUnique = name => {\n    const { contacts } = this.state\n    const isExistContact = !!contacts.find((contact) => contact.name === name)\n    isExistContact && alert('Contact is already exist');\n\n    return !isExistContact;\n  }\n  handleRemoveContact = (id) => this.setState(({ contacts }) => ({ contacts: contacts.filter((contact) => contact.id !== id) }));\n\n  handleFilterChange = (filter) => this.setState({ filter });\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n  }\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n    <div>\n      <h1>Phonebook</h1>\n        <ContactForm onAdd={this.handleAddContact} onCheckUnique={ this.handleCheckUnique}/>\n        \n        <h2>Contacts</h2>\n        \n        <Filter filter={filter} onChange={this.handleFilterChange} />\n        \n        <ContactList contacts={visibleContacts} onRemove={ this.handleRemoveContact}/>\n        \n      {/* <Lesson onSubmit={this.formSubmitHandle }/> */}\n      \n      \n    </div>\n  )\n  } \n}\n \n  \n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}